---
alwaysApply: true
---

# Curl and Tail Command Disown Pattern Enforcement

## **CRITICAL: Mandatory Curl and Tail Command Disown Pattern**

All curl and tail commands must use the exact disown pattern specified below to prevent terminal blocking and ensure proper process management.

## **MANDATORY PATTERN**

### **Required Structure**
```bash
(
  if curl --silent http://localhost:8081/status 2>/dev/null | grep -q 'running'; then
    echo "✅ 202 ok running"
  else
    echo "❌ returns error"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Pattern Components**
1. **Subshell Wrapping**: `( ... )` - Wraps the entire curl operation
2. **Conditional Logic**: `if curl ... then ... else ... fi` - Handles success/failure
3. **Background Execution**: `&` - Runs the subshell in background
4. **PID Capture**: `PID=$!` - Captures the background process ID
5. **Timeout Wait**: `sleep 30` - Waits for operation completion
6. **Process Disowning**: `disown $PID` - Detaches process from parent

## **ENFORCEMENT REQUIREMENTS**

### **✅ MANDATORY FOR ALL CURL COMMANDS**
- **Health Checks**: All health check curl commands
- **Status Verification**: All status verification curl commands
- **API Calls**: All API endpoint curl commands
- **Service Validation**: All service validation curl commands
- **Webhook Testing**: All webhook testing curl commands

### **✅ MANDATORY FOR ALL TAIL COMMANDS**
- **Log Monitoring**: All tail -f log monitoring commands
- **File Watching**: All file watching with tail commands
- **Log Analysis**: All log analysis with head/tail combinations
- **Real-time Logging**: All real-time log streaming commands

### **❌ FORBIDDEN PATTERNS**
```bash
# ❌ DIRECT CURL (BLOCKS TERMINAL)
curl -s http://localhost:8081/status

# ❌ SIMPLE BACKGROUND (NO PID MANAGEMENT)
curl -s http://localhost:8081/status &

# ❌ MISSING DISOWN
curl -s http://localhost:8081/status &
sleep 30

# ❌ DIRECT TAIL (BLOCKS TERMINAL)
tail -f logs/expo.log

# ❌ TAIL WITHOUT TIMEOUT (INFINITE HANGING)
tail -f logs/expo.log &

# ❌ TAIL WITHOUT PID MANAGEMENT
tail -f logs/expo.log | head -20 &
```

## **IMPLEMENTATION EXAMPLES**

### **Health Check Pattern**
```bash
(
  if curl --silent http://localhost:5555/health 2>/dev/null | grep -q 'ok'; then
    echo "✅ Flask app healthy"
  else
    echo "❌ Flask app unhealthy"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Webhook Endpoint Test**
```bash
(
  if curl --silent http://localhost:5555/webhook 2>/dev/null | grep -q 'ready'; then
    echo "✅ Webhook endpoint ready"
  else
    echo "❌ Webhook endpoint not ready"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **External Service Check**
```bash
(
  if curl --silent https://webhook-thoughtmarks.THOUGHTMARKS.app/webhook 2>/dev/null | grep -q 'ok'; then
    echo "✅ External webhook accessible"
  else
    echo "❌ External webhook inaccessible"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Service Status Verification**
```bash
(
  if curl --silent http://localhost:5052/status 2>/dev/null | grep -q 'running'; then
    echo "✅ Node server running"
  else
    echo "❌ Node server not running"
  fi
) &
PID=$!
sleep 30
disown $PID
```

## **VARIATIONS AND ADAPTATIONS**

### **With Custom Timeout**
```bash
(
  if curl --silent --max-time 30 http://localhost:8081/status 2>/dev/null | grep -q 'running'; then
    echo "✅ Service running"
  else
    echo "❌ Service not running"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **With Headers**
```bash
(
  if curl --silent -H "Content-Type: application/json" http://localhost:5555/api/status 2>/dev/null | grep -q 'ok'; then
    echo "✅ API endpoint responding"
  else
    echo "❌ API endpoint not responding"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **With POST Data**
```bash
(
  if curl --silent -X POST -d '{"test": "data"}' http://localhost:5555/webhook 2>/dev/null | grep -q 'received'; then
    echo "✅ Webhook received data"
  else
    echo "❌ Webhook did not receive data"
  fi
) &
PID=$!
sleep 30
disown $PID
```

## **COMPLIANCE CHECKLIST**

### **Before Executing Any Curl Command**
- [ ] **Subshell wrapping** used: `( ... )`
- [ ] **Conditional logic** implemented: `if curl ... then ... else ... fi`
- [ ] **Background execution** added: `&`
- [ ] **PID capture** included: `PID=$!`
- [ ] **Timeout wait** specified: `sleep 30`
- [ ] **Process disowning** added: `disown $PID`

### **Pattern Validation**
- [ ] **No direct curl execution** without pattern
- [ ] **No missing PID management**
- [ ] **No missing disown command**
- [ ] **Proper error handling** in conditional logic
- [ ] **Appropriate timeout** for operation

## **BENEFITS OF THIS PATTERN**

### **Terminal Safety**
- **No blocking**: Commands don't block the terminal
- **Process management**: Proper PID tracking and cleanup
- **Timeout protection**: Prevents infinite hanging
- **Error handling**: Graceful success/failure reporting

### **System Reliability**
- **Resource cleanup**: Processes properly disowned
- **Memory management**: No zombie processes
- **Stable operation**: Consistent behavior across executions
- **Debugging support**: Clear success/failure indicators

## **ENFORCEMENT SCOPE**

### **All Curl Operations**
- Health checks and status verification
- API endpoint testing
- Webhook validation
- Service availability checks
- External service verification

### **Zero Exceptions**
- **No exceptions** for quick curl commands
- **No exceptions** for simple status checks
- **No exceptions** for any curl operation
- **Mandatory compliance** for all curl usage

## **ERROR PREVENTION**

### **Common Mistakes Avoided**
- **Direct curl execution**: Always use subshell pattern
- **Missing PID management**: Always capture and disown PID
- **Insufficient timeout**: Always include appropriate sleep
- **No error handling**: Always include conditional logic
- **Blocking execution**: Always use background execution

**Status**: ✅ **ENFORCED - CRITICAL** - No exceptions allowed for curl command disown pattern
# Curl Command Disown Pattern Enforcement

## **CRITICAL: Mandatory Curl Command Disown Pattern**

All curl commands must use the exact disown pattern specified below to prevent terminal blocking and ensure proper process management.

## **MANDATORY PATTERN**

### **Required Structure**
```bash
(
  if curl --silent http://localhost:8081/status 2>/dev/null | grep -q 'running'; then
    echo "✅ 202 ok running"
  else
    echo "❌ returns error"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Pattern Components**
1. **Subshell Wrapping**: `( ... )` - Wraps the entire curl operation
2. **Conditional Logic**: `if curl ... then ... else ... fi` - Handles success/failure
3. **Background Execution**: `&` - Runs the subshell in background
4. **PID Capture**: `PID=$!` - Captures the background process ID
5. **Timeout Wait**: `sleep 30` - Waits for operation completion
6. **Process Disowning**: `disown $PID` - Detaches process from parent

## **ENFORCEMENT REQUIREMENTS**

### **✅ MANDATORY FOR ALL CURL COMMANDS**
- **Health Checks**: All health check curl commands
- **Status Verification**: All status verification curl commands
- **API Calls**: All API endpoint curl commands
- **Service Validation**: All service validation curl commands
- **Webhook Testing**: All webhook testing curl commands

### **❌ FORBIDDEN PATTERNS**
```bash
# ❌ DIRECT CURL (BLOCKS TERMINAL)
curl -s http://localhost:8081/status

# ❌ SIMPLE BACKGROUND (NO PID MANAGEMENT)
curl -s http://localhost:8081/status &

# ❌ MISSING DISOWN
curl -s http://localhost:8081/status &
sleep 30
```

## **IMPLEMENTATION EXAMPLES**

### **Health Check Pattern**
```bash
(
  if curl --silent http://localhost:5555/health 2>/dev/null | grep -q 'ok'; then
    echo "✅ Flask app healthy"
  else
    echo "❌ Flask app unhealthy"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Webhook Endpoint Test**
```bash
(
  if curl --silent http://localhost:5555/webhook 2>/dev/null | grep -q 'ready'; then
    echo "✅ Webhook endpoint ready"
  else
    echo "❌ Webhook endpoint not ready"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **External Service Check**
```bash
(
  if curl --silent https://webhook-thoughtmarks.THOUGHTMARKS.app/webhook 2>/dev/null | grep -q 'ok'; then
    echo "✅ External webhook accessible"
  else
    echo "❌ External webhook inaccessible"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Service Status Verification**
```bash
(
  if curl --silent http://localhost:5052/status 2>/dev/null | grep -q 'running'; then
    echo "✅ Node server running"
  else
    echo "❌ Node server not running"
  fi
) &
PID=$!
sleep 30
disown $PID
```

## **VARIATIONS AND ADAPTATIONS**

### **With Custom Timeout**
```bash
(
  if curl --silent --max-time 30 http://localhost:8081/status 2>/dev/null | grep -q 'running'; then
    echo "✅ Service running"
  else
    echo "❌ Service not running"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **With Headers**
```bash
(
  if curl --silent -H "Content-Type: application/json" http://localhost:5555/api/status 2>/dev/null | grep -q 'ok'; then
    echo "✅ API endpoint responding"
  else
    echo "❌ API endpoint not responding"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **With POST Data**
```bash
(
  if curl --silent -X POST -d '{"test": "data"}' http://localhost:5555/webhook 2>/dev/null | grep -q 'received'; then
    echo "✅ Webhook received data"
  else
    echo "❌ Webhook did not receive data"
  fi
) &
PID=$!
sleep 30
disown $PID
```

### **Tail Command Pattern**
```bash
(
  tail -f logs/expo.log | head -20 & PID=$! && sleep 10 && kill $PID
) >/dev/null 2>&1 & disown
```

### **Tail Command with Custom Timeout**
```bash
(
  tail -f logs/app.log | head -50 & PID=$! && sleep 15 && kill $PID
) >/dev/null 2>&1 & disown
```

### **Tail Command with Error Logging**
```bash
(
  tail -f logs/error.log | head -10 & PID=$! && sleep 5 && kill $PID
) >/dev/null 2>&1 & disown
```

## **COMPLIANCE CHECKLIST**

### **Before Executing Any Curl Command**
- [ ] **Subshell wrapping** used: `( ... )`
- [ ] **Conditional logic** implemented: `if curl ... then ... else ... fi`
- [ ] **Background execution** added: `&`
- [ ] **PID capture** included: `PID=$!`
- [ ] **Timeout wait** specified: `sleep 30`
- [ ] **Process disowning** added: `disown $PID`

### **Before Executing Any Tail Command**
- [ ] **Subshell wrapping** used: `( ... )`
- [ ] **PID capture** included: `PID=$!`
- [ ] **Timeout with kill** specified: `sleep X && kill $PID`
- [ ] **Output redirection** added: `>/dev/null 2>&1`
- [ ] **Background execution** added: `&`
- [ ] **Process disowning** added: `& disown`

### **Pattern Validation**
- [ ] **No direct curl execution** without pattern
- [ ] **No missing PID management**
- [ ] **No missing disown command**
- [ ] **Proper error handling** in conditional logic
- [ ] **Appropriate timeout** for operation
- [ ] **No direct tail execution** without pattern
- [ ] **No tail without timeout and kill**
- [ ] **No tail without output redirection**

## **BENEFITS OF THIS PATTERN**

### **Terminal Safety**
- **No blocking**: Commands don't block the terminal
- **Process management**: Proper PID tracking and cleanup
- **Timeout protection**: Prevents infinite hanging
- **Error handling**: Graceful success/failure reporting

### **System Reliability**
- **Resource cleanup**: Processes properly disowned
- **Memory management**: No zombie processes
- **Stable operation**: Consistent behavior across executions
- **Debugging support**: Clear success/failure indicators

## **ENFORCEMENT SCOPE**

### **All Curl Operations**
- Health checks and status verification
- API endpoint testing
- Webhook validation
- Service availability checks
- External service verification

### **All Tail Operations**
- Log file monitoring and streaming
- Real-time log analysis
- File watching and change detection
- Log filtering and processing
- Debug output monitoring

### **Zero Exceptions**
- **No exceptions** for quick curl commands
- **No exceptions** for simple status checks
- **No exceptions** for any curl operation
- **No exceptions** for any tail operation
- **Mandatory compliance** for all curl and tail usage

## **ERROR PREVENTION**

### **Common Mistakes Avoided**
- **Direct curl execution**: Always use subshell pattern
- **Missing PID management**: Always capture and disown PID
- **Insufficient timeout**: Always include appropriate sleep
- **No error handling**: Always include conditional logic
- **Blocking execution**: Always use background execution
- **Direct tail execution**: Always use subshell pattern with timeout
- **Infinite tail hanging**: Always include timeout and kill mechanism
- **Missing output redirection**: Always redirect output to prevent blocking

**Status**: ✅ **ENFORCED - CRITICAL** - No exceptions allowed for curl and tail command disown patterns
